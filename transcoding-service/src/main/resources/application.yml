server:
  port: 8082

spring:
  application:
    name: transcoding-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:transcode_db}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:1234}
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
    
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: ${KAFKA_GROUP_ID:transcode-service-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

# Custom Application Properties
transcoding:
  ffmpeg:
    path: ${FFMPEG_PATH:/usr/local/bin/ffmpeg}
    probe-path: ${FFPROBE_PATH:/usr/local/bin/ffprobe}
  
  processing:
    max-concurrent-jobs: ${MAX_CONCURRENT_JOBS:4}
    temp-directory: ${TEMP_DIR:/tmp/transcode}
    output-directory: ${OUTPUT_DIR:/app/output}
    cleanup-temp-files: true
    
  gpu:
    enabled: ${ENABLE_GPU_ACCELERATION:false}
    cuda-devices: ${CUDA_VISIBLE_DEVICES:0}
    
  defaults:
    video-codec: libx264
    audio-codec: aac
    output-format: mp4
    video-bitrate: 1500k
    audio-bitrate: 128k
    frame-rate: 30
    resolution: 1280x720

storage:
  minio:
    endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
    access-key: ${MINIO_ACCESS_KEY:minioadmin}
    secret-key: ${MINIO_SECRET_KEY:minioadmin}
    bucket-name: ${MINIO_BUCKET_NAME:video-files}

# Logging
logging:
  level:
    com.transcodeservice: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
